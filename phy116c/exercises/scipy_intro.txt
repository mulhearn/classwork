
#
# An excellent introduction and reference for using scipy and related tools is located here:
#  http://scipy-lectures.github.io
#

#
#  This example assumes you are running "ipython --pylab"
#

# ===================================================
#  Linear spaces, simple functions, and plotting
# ===================================================

# define x as an array using a "linear space":  100 evenly space points from 0.0 to 10.0:
from scipy import linspace
x = linspace(0.0, 10.0, 100)

# dump x to screen
x

# define a function of x with two parameters (a and b):
def f(x, a, b):
    return a * x + b

# define y as an array calculatedd as f(x) at each point x.
y = f(x, 2.0, 4.0)

# dump y to screen:
y

# make a plot of y versus x using a red line:
plot(x, y, 'r')

#define yexp as an array calculated as an exponential (pre-defined function) of x:
yexp = exp(x/3.0)

# plot yexp versus x, using a blue line:
plot(x, yexp, 'b')

# add axes labels:
xlabel("x")
ylabel("f(x)")

# note if you know latex, you can use latex formatted text like this:
#xlabel("$x$")
#ylabel("$f(x)$")

# Save your beautiful plot
savefig("test.png")

#
# Exercise 1: Plot the sin(x) and cos(x) from 0 to 2 pi using two different
# colors.  Using the website reference above: (A) Add a legend to the plot, (II)
# add a text label and arrow pointing to a minimum and a maximum of the sin or
# cos function.  Save your final plot as a .png file.
#

# =================================
# Importing data from a text file.
# =================================

# Save the following simple data to a text file called "mydat.txt" (omit the
# comment symbol '#' starting each line.) located in your anaconda working directory.
# 1 1
# 2 4
# 3 9
# 4 16
# 5 25

# load the data from a textfile, unpacking the data so that the first column is
#  sent to array x and second to array y:
x, y = loadtxt("mydat.txt",unpack=True)

# show x
x

# show y
y

# plot y versus x as blue circles (you should see a parabola):
plot(x,y, "bo");

# Exercise 2: Import the file "data_eg1.txt" (on smartsite) as three columns
# (x,y1 and y2).  Plot y1 and y2 versus x, in two different colors, on the same
# plot.  Label the axis "x" and "y".


# =================================
# Saving data to a text file.
# =================================

# By default, when saving mulitple vectors, numpy writes them one after another.
  To save data in numpy in the same format as we read it (one of each variable
  on each line) you need to use the column_stack command.

# save only x and y1 variables from previous example
savetxt('myslice.txt', column_stack((x,y1)))

# you should verify that myslice.txt has the format you expect!

