
# Additional documentation on scipy treatment of normal and poisson distributions is here:
# http://docs.scipy.org/doc/scipy-0.13.0/reference/generated/scipy.stats.poisson.html
# http://docs.scipy.org/doc/scipy-0.13.0/reference/generated/scipy.stats.norm.html





# ================================================
# The Normal Distribution, and Histogram Plotting
# ================================================

# define an array xa containing 1000 values randomly distributed according to a
#  Gaussian distribution with mean 5.0 and sigma 2.0:
xa = random.normal(5.0, 2.0, 1000);

# calculate a histogram (h) with bin edges (xe) from the array xa, with 50 bins
# in range 0.0 to 10.0: 
h,xe = histogram(xa, 50, (0.0, 10.0))

# plot histogram as an outline.  Note that the append(h,0) below appends a dummy
# entry with value 0 to h, so that the first two arguments have same number
# of entries.  (The steps-post style does not use this dummy value).  
plot(xe, append(h,0), drawstyle='steps-post')

#close the plot so we can see other styles:
close()

# alternate form of plot (preferred):
# show value and error for each bin at bin center.
# errorbars are displayed as sqrt(n) as is the usual convention (valid for large n).
errorbar((xe[:-1]+xe[1:])/2., h, sqrt(h), fmt="bo")

# import the normal distribution class:
from scipy.stats import norm

# declare a linear space to use a range for normal distribution
x = linspace(0.0,10.0,100);

# choose a scale factor:
scale = 100

# set y to the Gaussian distribution probability distribution function times a scale factor
y = scale * norm.pdf(x, 5.0, 2.0)

# plot the Gaussian:
plot(x,y,"r")

# Exercise 1: The scale factor 100 was chosen arbitrarily.  Keeping in mind that
# the Gaussian pdf is normalized to 1 already, calculate the correct scale
# factor to make the Guassian function agree with the histogram.

# Exercise 2: Increase the number of events genenerated (at the start) from 1000
# to 100,000 and repeat.

# ============================
# The Central Limit Theorem
# ============================

# The Central Limit Theorem says that the sum of many random variables drawn
# from *any* random distribution tends toward the Gaussian distribution.  In
# this example, we add 100 random variables which are distributed uniformly (a
# flat distribution) between 0.0 and and 1.0.

# initialize an array of length 1000 with each value set to zero:
x = zeros(1000)

# Loop 100 times, adding a random number
for i in range(0,100):
    x = x + random.rand(1000)

# Exercise 3: Plot a histogram from the final values of "x".  Does it look
# Gaussian?  Superimpose an appropriately choosen Gaussian for comparison.

# ===============================
# The Poisson Distribution
# ===============================

# import the poisson class:
from scipy.stats import poisson

# set x to the array of natural numbers [0,1,2,...,25]
x = range(0,25)

# set y1 to the Poisson "mass" function (some authors use probability mass
# function instead of probability density function when the variable is
# discrete) with a Poisson mean of 1.0 at each value of x:
y1 = poisson.pmf(x, 1.0)

# plot the results with red circles at each point:
plot(x,y1,"r")

# Exercise 4: On the same plot, draw the poisson distributions for a mean of 5.0
# and 10.0 using new colors (e.g. "b" and "g").  Does the distribution look
# Gaussian?  Plot an appropriately choosen Gaussian to compare with the Poisson
# distribution with a mean of 10.0.
